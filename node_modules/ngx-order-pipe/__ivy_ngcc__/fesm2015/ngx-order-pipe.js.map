{"version":3,"file":"ngx-order-pipe.js","sources":["../../src/app/order-pipe/ngx-order.pipe.ts","../../src/app/order-pipe/ngx-order.module.ts","../../ngx-order-pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"orderBy\",\n  pure: false,\n})\nexport class OrderPipe implements PipeTransform {\n  /**\n   * Check if a value is a string\n   *\n   * @param value\n   */\n  static isString(value: any): boolean {\n    return typeof value === \"string\" || value instanceof String;\n  }\n\n  /**\n   * Sorts values ignoring the case\n   *\n   * @param a\n   * @param b\n   */\n  static caseInsensitiveSort(a: any, b: any) {\n    if (OrderPipe.isString(a) && OrderPipe.isString(b)) {\n      return a.localeCompare(b);\n    }\n    return OrderPipe.defaultCompare(a, b);\n  }\n\n  /**\n   * Default compare method\n   *\n   * @param a\n   * @param b\n   */\n  static defaultCompare(a: any, b: any) {\n    if (a && a instanceof Date) {\n      a = a.getTime();\n    }\n    if (b && b instanceof Date) {\n      b = b.getTime();\n    }\n\n    if (a === b) {\n      return 0;\n    }\n    if (a == null) {\n      return 1;\n    }\n    if (b == null) {\n      return -1;\n    }\n    return a > b ? 1 : -1;\n  }\n\n  /**\n   * Parse expression, split into items\n   * @param expression\n   * @returns {string[]}\n   */\n  static parseExpression(expression: string): string[] {\n    expression = expression.replace(/\\[(\\w+)\\]/g, \".$1\");\n    expression = expression.replace(/^\\./, \"\");\n    return expression.split(\".\");\n  }\n\n  /**\n   * Get value by expression\n   *\n   * @param object\n   * @param expression\n   * @returns {any}\n   */\n  static getValue(object: any, expression: string[]): any {\n    for (let i = 0, n = expression.length; i < n; ++i) {\n      if (!object) {\n        return;\n      }\n      const k = expression[i];\n      if (!(k in object)) {\n        return;\n      }\n      if (typeof object[k] === \"function\") {\n        object = object[k]();\n      } else {\n        object = object[k];\n      }\n    }\n\n    return object;\n  }\n\n  /**\n   * Set value by expression\n   *\n   * @param object\n   * @param value\n   * @param expression\n   */\n  static setValue(object: any, value: any, expression: string[]) {\n    let i;\n    for (i = 0; i < expression.length - 1; i++) {\n      object = object[expression[i]];\n    }\n\n    object[expression[i]] = value;\n  }\n\n  transform(\n    value: any | any[],\n    expression?: any,\n    reverse?: boolean,\n    isCaseInsensitive: boolean = false,\n    comparator?: Function\n  ): any {\n    if (!value) {\n      return value;\n    }\n\n    if (Array.isArray(expression)) {\n      return this.multiExpressionTransform(\n        value,\n        expression.slice(),\n        reverse,\n        isCaseInsensitive,\n        comparator\n      );\n    }\n\n    if (Array.isArray(value)) {\n      return this.sortArray(\n        value.slice(),\n        expression,\n        reverse,\n        isCaseInsensitive,\n        comparator\n      );\n    }\n\n    if (typeof value === \"object\") {\n      return this.transformObject(\n        Object.assign({}, value),\n        expression,\n        reverse,\n        isCaseInsensitive,\n        comparator\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   * Sort array, returns sorted array\n   *\n   * @param array\n   * @param expression\n   * @param reverse\n   * @param isCaseInsensitive\n   * @param comparator\n   * @returns {Type[]}\n   */\n  private sortArray<Type>(\n    array: Type[],\n    expression?: any,\n    reverse?: boolean,\n    isCaseInsensitive?: boolean,\n    comparator?: Function\n  ): Type[] {\n    const isDeepLink = expression && expression.indexOf(\".\") !== -1;\n\n    if (isDeepLink) {\n      expression = OrderPipe.parseExpression(expression);\n    }\n\n    let compareFn: Function;\n\n    if (comparator && typeof comparator === \"function\") {\n      compareFn = comparator;\n    } else {\n      compareFn = isCaseInsensitive\n        ? OrderPipe.caseInsensitiveSort\n        : OrderPipe.defaultCompare;\n    }\n\n    const sortedArray: any[] = array.sort((a: any, b: any): number => {\n      if (!expression) {\n        return compareFn(a, b);\n      }\n\n      if (!isDeepLink) {\n        if (a && b) {\n          return compareFn(a[expression], b[expression]);\n        }\n        return compareFn(a, b);\n      }\n\n      return compareFn(\n        OrderPipe.getValue(a, expression),\n        OrderPipe.getValue(b, expression)\n      );\n    });\n\n    if (reverse) {\n      return sortedArray.reverse();\n    }\n\n    return sortedArray;\n  }\n\n  /**\n   * Transform Object\n   *\n   * @param value\n   * @param expression\n   * @param reverse\n   * @param isCaseInsensitive\n   * @param comparator\n   * @returns {any[]}\n   */\n  private transformObject(\n    value: any | any[],\n    expression?: any,\n    reverse?: boolean,\n    isCaseInsensitive?: boolean,\n    comparator?: Function\n  ): any {\n    const parsedExpression = OrderPipe.parseExpression(expression);\n    let lastPredicate = parsedExpression.pop();\n    let oldValue = OrderPipe.getValue(value, parsedExpression);\n\n    if (!Array.isArray(oldValue)) {\n      parsedExpression.push(lastPredicate);\n      lastPredicate = null;\n      oldValue = OrderPipe.getValue(value, parsedExpression);\n    }\n\n    if (!oldValue) {\n      return value;\n    }\n\n    OrderPipe.setValue(\n      value,\n      this.transform(oldValue, lastPredicate, reverse, isCaseInsensitive),\n      parsedExpression\n    );\n    return value;\n  }\n\n  /**\n   * Apply multiple expressions\n   *\n   * @param value\n   * @param {any[]} expressions\n   * @param {boolean} reverse\n   * @param {boolean} isCaseInsensitive\n   * @param {Function} comparator\n   * @returns {any}\n   */\n  private multiExpressionTransform(\n    value: any,\n    expressions: any[],\n    reverse: boolean,\n    isCaseInsensitive: boolean = false,\n    comparator?: Function\n  ): any {\n    return expressions.reverse().reduce((result: any, expression: any) => {\n      return this.transform(\n        result,\n        expression,\n        reverse,\n        isCaseInsensitive,\n        comparator\n      );\n    }, value);\n  }\n}\n","/**\n * Created by vadimdez on 20/01/2017.\n */\nimport { NgModule } from '@angular/core';\nimport { OrderPipe } from './ngx-order.pipe';\n\n@NgModule({\n  declarations: [OrderPipe],\n  exports: [OrderPipe],\n  providers: [OrderPipe]\n})\nexport class OrderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}